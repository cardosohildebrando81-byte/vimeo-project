import { createClient } from '@supabase/supabase-js';
import dotenv from 'dotenv';

// Carregar vari√°veis de ambiente
dotenv.config();

const supabaseUrl = process.env.VITE_SUPABASE_URL!;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY!;

console.log('üîß Configura√ß√£o:');
console.log('URL:', supabaseUrl);
console.log('Service Key:', supabaseServiceKey ? 'Configurada' : 'N√£o encontrada');

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå Vari√°veis de ambiente necess√°rias n√£o encontradas');
  process.exit(1);
}

// Cliente com service role
const supabase = createClient(supabaseUrl, supabaseServiceKey, {
  auth: {
    autoRefreshToken: false,
    persistSession: false
  }
});

async function testUserCreation() {
  console.log('\nüß™ Testando cria√ß√£o de usu√°rio...');
  
  try {
    // 1. Testar se conseguimos acessar a tabela User
    console.log('1Ô∏è‚É£ Testando acesso √† tabela User...');
    const { data: users, error: selectError } = await supabase
      .from('User')
      .select('*')
      .limit(1);

    if (selectError) {
      console.error('‚ùå Erro ao acessar tabela User:', selectError.message);
      
      // Tentar criar a tabela se n√£o existir
      console.log('2Ô∏è‚É£ Tentando criar a tabela User...');
      const { error: createError } = await supabase.rpc('exec_sql', {
        sql: `
          CREATE TABLE IF NOT EXISTS public."User" (
            id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
            "organizationId" TEXT NOT NULL DEFAULT '1',
            "authProvider" TEXT NOT NULL DEFAULT 'SUPABASE',
            "authProviderId" UUID NOT NULL UNIQUE,
            email TEXT NOT NULL,
            "displayName" TEXT NOT NULL,
            role TEXT NOT NULL DEFAULT 'CLIENT' CHECK (role IN ('CLIENT', 'MANAGER', 'ADMIN')),
            "isActive" BOOLEAN NOT NULL DEFAULT true,
            "createdAt" TIMESTAMPTZ NOT NULL DEFAULT NOW(),
            "updatedAt" TIMESTAMPTZ NOT NULL DEFAULT NOW()
          );
          
          ALTER TABLE public."User" ENABLE ROW LEVEL SECURITY;
          
          CREATE POLICY IF NOT EXISTS "Enable all for service role" ON public."User"
            FOR ALL USING (true);
        `
      });
      
      if (createError) {
        console.error('‚ùå Erro ao criar tabela:', createError.message);
        return;
      }
      
      console.log('‚úÖ Tabela criada com sucesso!');
    } else {
      console.log('‚úÖ Tabela User acess√≠vel:', users?.length || 0, 'registros encontrados');
    }

    // 2. Testar inser√ß√£o de um usu√°rio de teste
    console.log('3Ô∏è‚É£ Testando inser√ß√£o de usu√°rio...');
    const testUser = {
      organizationId: '1',
      authProvider: 'SUPABASE',
      authProviderId: '00000000-0000-0000-0000-000000000001', // UUID de teste
      email: 'teste@exemplo.com',
      displayName: 'Usu√°rio Teste',
      role: 'CLIENT',
      isActive: true
    };

    const { data: insertedUser, error: insertError } = await supabase
      .from('User')
      .insert(testUser)
      .select()
      .single();

    if (insertError) {
      console.error('‚ùå Erro ao inserir usu√°rio:', insertError.message);
    } else {
      console.log('‚úÖ Usu√°rio inserido com sucesso:', insertedUser);
      
      // Limpar o usu√°rio de teste
      await supabase
        .from('User')
        .delete()
        .eq('id', insertedUser.id);
      console.log('üßπ Usu√°rio de teste removido');
    }

  } catch (error) {
    console.error('‚ùå Erro geral:', error);
  }
}

testUserCreation();